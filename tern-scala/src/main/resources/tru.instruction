# instructions for building the tree

use org.ternlang.tree.literal {
   binary = NumberLiteral,
   boolean = BooleanLiteral,
   decimal = NumberLiteral,
   hexadecimal = NumberLiteral,
   identifier = TextLiteral,
   null = NullLiteral,
   text = TextLiteral,
   type = TextLiteral
}

use org.ternlang.tree.operation {
   number = SignedNumber
}

use org.ternlang.tree.template {
   template = TextTemplate
}

use org.ternlang.tree.annotation {
   annotation-declaration = AnnotationDeclaration,
   annotation-list = AnnotationList,
   annotation-name = AnnotationName
}

use org.ternlang.tree.construct {
   map-entry = MapEntry,
   map-entry-data = MapEntryData,
   map-key = MapKey
}

use trumid.poc.dsl.tree {
   constant-definition = ConstantDefinition,
   namespace = SourceNamespace,
   source = Source,
   option = Optional
}

use trumid.poc.dsl.tree.constraint {
   entity-constraint = EntityConstraint
}

use trumid.poc.dsl.tree.enumeration {
   enum-definition = EnumDefinition,
   enum-property = EnumProperty,
   enum-reference = EnumReference,
   enum-reference-list = EnumReferenceList,
   inner-enum-definition = InnerEnumDefinition
}

use trumid.poc.dsl.tree.imports {
   full-qualifier = FullQualifier,
   import = ImportDeclaration,
   import-list = ImportList,
   path = ResourcePath,
   type-set = TypeSet,
   wild-qualifier = WildQualifier
}

use trumid.poc.dsl.tree.struct {
   inner-interface-definition = InnerInterfaceDefinition,
   inner-struct-definition = InnerStructDefinition,
   interface-definition = InterfaceDefinition,
   struct-definition = StructDefinition,
   struct-extension = StructExtension,
   struct-property = StructProperty
}

use trumid.poc.dsl.tree.union {
   inner-union-definition = InnerUnionDefinition,
   union-definition = UnionDefinition,
   union-property = UnionProperty,
   union-requirement = UnionRequirement
}


